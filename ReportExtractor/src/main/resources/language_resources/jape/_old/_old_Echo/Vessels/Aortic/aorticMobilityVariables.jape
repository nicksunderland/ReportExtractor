Imports: {
	import static gate.Utils.*;

}


/*
*  aorticMobilityVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: aorticMobilityVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of aortic valve mobility Variable relations from Lookup Annotations 
*/

Phase: aorticMobilityVariables
Input: Token Lookup  
Options: control=appelt 



Rule: AorticMobilityValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

( {Token.string ==~ "(?i)RESTRICTED"} | {Token.string ==~ "(?i)RESTRICTING"} | {Token.string ==~ "(?i)RESTRICTION"} | 
{Token.string ==~ "(?i)RESTRICTIVE"})


):context


):AorticMobilityValueGram 

--> 
:AorticMobilityValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "0");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility normal");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }


Rule: AorticMobilityAltern1EValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

({Token.string ==~ "(?i)REDUCED"} | {Token.string ==~ "(?i)DECREASED"} | {Token.string ==~ "(?i)POOR"})
({Token.kind == "word"})?
({Token.string ==~ "(?i)MOBILITY"} | {Token.string ==~ "(?i)EXCURSION"})

):context


):AorticMobilityAltern1EValueGram 

--> 
:AorticMobilityAltern1EValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1EValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "0");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern1E");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
Rule: AorticMobilityAltern1FValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

({Token.string ==~ "(?i)MOBILITY"} | {Token.string ==~ "(?i)EXCURSION"})
({Token.kind == "word"})?
({Token.string ==~ "(?i)REDUCED"} | {Token.string ==~ "(?i)DECREASED"} | {Token.string ==~ "(?i)POOR"})

):context


):AorticMobilityAltern1FValueGram 

--> 
:AorticMobilityAltern1FValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1FValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "0");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","MV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "MV Mobility altern1F");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }


Rule: AorticMobilityAltern1AValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

{Token.string ==~ "(?i)MOBILE"}
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.string ==~ "(?i)LEAFLET[S]?"} | {Token.string ==~ "(?i)CUSP[S]?"})


):context


):AorticMobilityAltern1AValueGram 

--> 
:AorticMobilityAltern1AValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1AValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern1A");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AorticMobilityAltern1BValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(


({Token.string ==~ "(?i)LEAFLET[S]?"} | {Token.string ==~ "(?i)CUSP[S]?"})
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.kind == "word"})?
{Token.string ==~ "(?i)MOBILE"}


):context


):AorticMobilityAltern1BValueGram 

--> 
:AorticMobilityAltern1BValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1BValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern1B");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AorticMobilityAltern1CValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(


({Token.string ==~ "(?i)GOOD"} | {Token.string ==~ "(?i)REASONABLE"} | {Token.string ==~ "(?i)MILD"})
({Token.kind == "word"})?
({Token.string ==~ "(?i)MOBILITY"} | {Token.string ==~ "(?i)EXCURSION"} | {Token.string ==~ "(?i)OPENING"})


):context


):AorticMobilityAltern1CValueGram 

--> 
:AorticMobilityAltern1CValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1CValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern1C");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }

Rule: AorticMobilityAltern1DValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

({Token.string ==~ "(?i)MOBILITY"} | {Token.string ==~ "(?i)EXCURSION"})
({Token.kind == "word"})?
({Token.string ==~ "(?i)GOOD"} | {Token.string ==~ "(?i)REASONABLE"})

):context


):AorticMobilityAltern1DValueGram 

--> 
:AorticMobilityAltern1DValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern1DValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern1D");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }


Rule: AorticMobilityAltern2ValueRule
Priority: 10
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

(
{Token.string ==~ "(?i)NO"} | {Token.string ==~ "(?i)NOT"} |
{Token.string ==~ "(?i)NO"} {Token.string ==~ "(?i)AORTIC"} 
)

( {Token.string ==~ "(?i)RESTRICTED"} | {Token.string ==~ "(?i)RESTRICTING"} | {Token.string ==~ "(?i)RESTRICTION"} | 
{Token.string ==~ "(?i)RESTRICTIVE"})


):context


):AorticMobilityAltern2ValueGram 

--> 
:AorticMobilityAltern2ValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern2ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern2");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AorticMobilityAltern3ValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(

({Token.string ==~ "(?i)OPEN[S]?"} {Token.string ==~ "(?i)WELL"})

):context


):AorticMobilityAltern3ValueGram 

--> 
:AorticMobilityAltern3ValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticMobilityAltern3ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
		
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "0 (restricted), 1 (mobile), NULL (assume mobile 1)");
	newFeatures.put("varType","AV Mobility");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Mobility altern3");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }