Imports: {
	import static gate.Utils.*;

}


/*
*  tricuspidTRVmaxVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: tricuspidTRVmaxVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of tricuspid regurgitation max velocity Variable relations from Lookup Annotations 
*/

Phase: tricuspidTRVmaxVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: TricuspidTRVmaxValueRule
Priority:1
(
(
({Token.string ==~ "(?i)TR"} | {Token.string ==~ "(?i)RAVVR"} | 
{Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)REGURGITATION"} |
{Token.string ==~ "(?i)RAVV"} {Token.string ==~ "(?i)REGURGITATION"})

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} ) 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)AT"})?

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):TricuspidTRVmaxValueGram 

--> 
:TricuspidTRVmaxValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax normal");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }


Rule: TricuspidTRVmaxAlternValueRule
(
(
({Token.string ==~ "(?i)TR"} | {Token.string ==~ "(?i)RAVVR"} | 
{Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)REGURGITATION"} |
{Token.string ==~ "(?i)RAVV"} {Token.string ==~ "(?i)REGURGITATION"})
({Token.string ==~ "(?i)PPD"} | {Token.string ==~ "(?i)MAXPG"} | {Token.string ==~ "(?i)MAX"} {Token.string ==~ "(?i)PG"})
({Token.string ==~ ":"})?

({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}

(
({Token.string ==~ "(?i)MMHG"})
)

({Token.string == ","})?
({Token.position == "startpunct"})?

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} ) 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)AT"})?

):context


(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)


):TricuspidTRVmaxAlternValueGram 

--> 
:TricuspidTRVmaxAlternValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: TricuspidTRVmaxAltern2ValueRule
(
(
( {Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)TV"} | {Token.string ==~ "(?i)RAVV"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)PULMONARY", !Lookup.majorType == Tricuspid_Specific_Word_Exclusion, Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)MISCELLANEOUS", Token.string !=~ "(?i)MISC"} |{SpaceToken.string!=PEAK})*

):context
)

(
(
({Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)R[AV]"} {Token.string ==~ "(?i)TO"} {Token.string ==~ "(?i)R[AV]"}
{Token.string ==~ "(?i)PRESSURE"} {Token.string ==~ "(?i)DROP"} {Token.string ==~ "(?i)IS"} {Token.string ==~ "(?i)MEASURED"}
{Token.string ==~ "(?i)AT"})

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})

(
({Token.string ==~ "(?i)MMHG"})
)

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == ","} | {Token.string ==~ "(?i)AT"})?

({Token.position == "startpunct"})?

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} )? 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == ","} | {Token.string ==~ "(?i)AT"})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):TricuspidTRVmaxAltern2ValueGram 

--> 
:TricuspidTRVmaxAltern2ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxAltern2ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern2");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: TricuspidTRVmaxAltern3ValueRule
(
(
( {Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)TV"} | {Token.string ==~ "(?i)RAVV"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)PULMONARY", !Lookup.majorType == Tricuspid_Specific_Word_Exclusion, Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)MISCELLANEOUS", Token.string !=~ "(?i)MISC"} |{SpaceToken.string!=PEAK})*

):context
)

(
(
({Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)R[AV]"} {Token.string ==~ "(?i)TO"} {Token.string ==~ "(?i)R[AV]"}
{Token.string ==~ "(?i)PRESSURE"} {Token.string ==~ "(?i)DROP"} {Token.string ==~ "(?i)IS"} {Token.string ==~ "(?i)MEASURED"}
{Token.string ==~ "(?i)AT"})

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)


):TricuspidTRVmaxAltern3ValueGram 

--> 
:TricuspidTRVmaxAltern3ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxAltern3ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern3");
	
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: TricuspidTRVmaxAltern4ValueRule
(
(
( {Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)TV"} | {Token.string ==~ "(?i)RAVV"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)PULMONARY", !Lookup.majorType == Tricuspid_Specific_Word_Exclusion, Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)MISCELLANEOUS", Token.string !=~ "(?i)MISC"} |{SpaceToken.string!=PEAK})*

):context
)

(
(
{Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)R[AV]"} {Token.string ==~ "(?i)TO"} {Token.string ==~ "(?i)R[AV]"}
{Token.string ==~ "(?i)PRESSURE"} {Token.string ==~ "(?i)DROP"} 
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.kind == "word"})?
({Token.kind == "word"})?

{Token.string == ","}

{Token.kind == "word"}

{Token.string ==~ "(?i)MEASURED"}
{Token.string ==~ "(?i)MAX"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)AT"})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})

(
({Token.string ==~ "(?i)MMHG"})
)

):context


({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == ","} | {Token.string ==~ "(?i)AT"})?

({Token.position == "startpunct"})?

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} )? 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == ","} | {Token.string ==~ "(?i)AT"})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)


):TricuspidTRVmaxAltern4ValueGram 

--> 
:TricuspidTRVmaxAltern4ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxAltern4ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern4");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: TricuspidTRVmaxAltern5ValueRule
(
(
( {Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)TV"} | {Token.string ==~ "(?i)RAVV"} | {Token.string ==~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)PULMONARY", !Lookup.majorType == Tricuspid_Specific_Word_Exclusion, Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)MISCELLANEOUS", Token.string !=~ "(?i)MISC"} |{SpaceToken.string!=PEAK})*

):context
)

(
(
({Token.string ==~ "(?i)PPD"} | {Token.string ==~ "(?i)MAXPG"} | {Token.string ==~ "(?i)MAX"} {Token.string ==~ "(?i)PG"})

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)AT"})?


(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})

(
({Token.string ==~ "(?i)MMHG"})
)

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == ","} | {Token.string == "."} | {Token.string ==~ "(?i)AT"})?

):context

({Token.position == "startpunct"})?

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} )? 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)AT"})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):TricuspidTRVmaxAltern5ValueGram 


--> 
:TricuspidTRVmaxAltern5ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxAltern5ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern5");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: TricuspidTRVmaxAltern6ValueRule
Priority:1
(
(
({Token.string ==~ "(?i)TR"} | {Token.string ==~ "(?i)RAVVR"} | 
{Token.string ==~ "(?i)TRICUSPID"} {Token.string ==~ "(?i)REGURGITATION"} |
{Token.string ==~ "(?i)RAVV"} {Token.string ==~ "(?i)REGURGITATION"})

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)AT"})?

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
{Token.string == "/"} {Token.string ==~ "(?i)S"}
)

):TricuspidTRVmaxValueAltern6Gram 

--> 
:TricuspidTRVmaxValueAltern6Gram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TricuspidTRVmaxValueAltern6Gram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","TR Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","TR Vmax altern6");
		
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }