Imports: {
	import static gate.Utils.*;
	import java.util.regex.*;
}


/*
*  leftVentricleWMDyskineticStatusVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: leftVentricleWMDyskineticStatusVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of Left Ventricle dyskinetic status Variable relations from Lookup Annotations 
*/

Phase: leftVentricleWMDyskineticStatusVariables
Input: Token Lookup  
Options: control=appelt 

  
 
Rule: LeftVentricleWMDyskineticStatusValueRule
(
(
( {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)VENTRICLE"} )
({Token.string !=~ "(?i)Measurements"} |{SpaceToken.string!=contract})*

):context
)

(
(

dyskinesisTerm

):context


):LeftVentricleWMDyskineticStatusValueGram 

--> 
:LeftVentricleWMDyskineticStatusValueGram
  {

	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");

	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("LeftVentricleWMDyskineticStatusValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	newFeatures.put("varValue", "1");
	newFeatures.put("unit", "levels: 1 (dyskinetic), null (assume not dyskinetic)");
	newFeatures.put("varType","LV Dyskinesis Status");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "LV Dyskinesis Status");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"CardiacChambers", newFeatures);
  }
