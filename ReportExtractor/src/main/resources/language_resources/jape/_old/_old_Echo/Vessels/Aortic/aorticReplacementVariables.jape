Imports: {
	import static gate.Utils.*;

}


/*
*  aorticReplacementVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: aorticReplacementVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of aortic valve replacement Variable relations from Lookup Annotations 
*/

Phase: aorticReplacementVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: AorticReplacementValueRule
Priority: 10
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)BIOLOGICAL", Token.string !=~ "(?i)TAVI", Token.string !=~ "(?i)AVR", Token.string !=~ "(?i)TRANSCATHETER", Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
( 

(
({Token.string ==~ "(?i)BIOLOGICAL"} | {Token.string ==~ "(?i)BIOPROSTHETIC"} | {Token.string ==~ "(?i)TISSUE"} |
{Token.string ==~ "(?i)PORCINE"} | {Token.string ==~ "(?i)BOVINE"} ):biological | 
({Token.string ==~ "(?i)TAVI"} | {Token.string ==~ "(?i)TRANSCATHETER"}):tavi | 
({Token.string ==~ "(?i)MECHANICAL"}):mechanical 
)

({Token.string ==~ "(?i)AORTIC"})? 
({Token.string ==~ "(?i)VALVE"})?

({Token.string ==~ "(?i)REPLACEMENT"} | {Token.string ==~ "(?i)AVR"} | {Token.string ==~ "(?i)PROSTHESIS"})

):context


):AorticReplacementValueGram 

--> 
:AorticReplacementValueGram
  {
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedbiological=(gate.AnnotationSet) bindings.get("biological");
	gate.AnnotationSet matchedtavi=(gate.AnnotationSet) bindings.get("tavi");
	gate.AnnotationSet matchedmechanical=(gate.AnnotationSet) bindings.get("mechanical");

	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticReplacementValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	if (matchedbiological != null) {
		newFeatures.put("varValue", "Biological");
	} else if (matchedtavi != null) {
		newFeatures.put("varValue", "TAVI");
	} else if (matchedmechanical != null) {
		newFeatures.put("varValue", "Mechanical");
	} else {
		newFeatures.put("varValue", "Unspecified AVR");
	}
	
	newFeatures.put("unit", "levels: Biological (PORCINE, BOVINE), TAVI, Mechanical, Unspecified AVR");
	newFeatures.put("varType","AV Replacement");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Replacement normal");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: AorticReplacementAlternValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)BIOLOGICAL", Token.string !=~ "(?i)TAVI", Token.string !=~ "(?i)AVR", Token.string !=~ "(?i)TRANSCATHETER", Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
( 

({Token.string ==~ "(?i)AORTIC"})? 
({Token.string ==~ "(?i)VALVE"})?

({Token.string ==~ "(?i)REPLACEMENT"} | {Token.string ==~ "(?i)AVR"} | {Token.string ==~ "(?i)PROSTHESIS"})

):context


):AorticReplacementAlternValueGram 

--> 
:AorticReplacementAlternValueGram
  {
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedbiological=(gate.AnnotationSet) bindings.get("biological");
	gate.AnnotationSet matchedtavi=(gate.AnnotationSet) bindings.get("tavi");
	gate.AnnotationSet matchedmechanical=(gate.AnnotationSet) bindings.get("mechanical");

    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticReplacementAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	newFeatures.put("varValue", "Unspecified AVR");
	
	newFeatures.put("unit", "levels: Biological (PORCINE, BOVINE), TAVI, Mechanical, Unspecified AVR");
	newFeatures.put("varType","AV Replacement");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Replacement altern");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AorticReplacementAltern2ValueRule
(
(
({Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"} | {Token.string ==~ "(?i)AO"} | {Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)BIOLOGICAL", Token.string !=~ "(?i)TAVI", Token.string !=~ "(?i)AVR", Token.string !=~ "(?i)TRANSCATHETER", Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
( 

(
({Token.string ==~ "(?i)BIOLOGICAL"} | {Token.string ==~ "(?i)BIOPROSTHETIC"} | {Token.string ==~ "(?i)TISSUE"} |
{Token.string ==~ "(?i)PORCINE"} | {Token.string ==~ "(?i)BOVINE"} ):biological | 
({Token.string ==~ "(?i)TAVI"} | {Token.string ==~ "(?i)TRANSCATHETER"}):tavi | 
({Token.string ==~ "(?i)MECHANICAL"}):mechanical 
)

({Token.string ==~ "(?i)AORTIC"})? 
({Token.string ==~ "(?i)VALVE"})?


):context


):AorticReplacementAltern2ValueGram 

--> 
:AorticReplacementAltern2ValueGram
  {
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedbiological=(gate.AnnotationSet) bindings.get("biological");
	gate.AnnotationSet matchedtavi=(gate.AnnotationSet) bindings.get("tavi");
	gate.AnnotationSet matchedmechanical=(gate.AnnotationSet) bindings.get("mechanical");

	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticReplacementAltern2ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	if (matchedbiological != null) {
		newFeatures.put("varValue", "Biological");
	} else if (matchedtavi != null) {
		newFeatures.put("varValue", "TAVI");
	} else if (matchedmechanical != null) {
		newFeatures.put("varValue", "Mechanical");
	} else {
		newFeatures.put("varValue", "Unspecified AVR");
	}
	
	newFeatures.put("unit", "levels: Biological (PORCINE, BOVINE), TAVI, Mechanical, Unspecified AVR");
	newFeatures.put("varType","AV Replacement");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Replacement altern2");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }