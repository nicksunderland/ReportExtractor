Imports: {
	import static gate.Utils.*;

}


/*
*  lateralSMeasurements.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: lateralSMeasurements.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of LV Measurement Variable relations from Lookup Annotations 
*/

Phase: lateralSMeasurements
Input: Token Lookup
Options: control=Appelt 




Rule: LateralSVelocityValueRule
(
( 
(({Token.string ==~ "(?i)Lateral"} | {Token.string ==~ "(?i)Lat"})
({Token.string =~ "(?i)peak"})?
{Token.string ==~ "(?i)S"}
({Token.string == "'"} | {Token.string =~ "(?i)Prime"})?
({Token.string =~ "(?i)velocity"})? )
({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue
(
(({Token.string == "cm"} | {Token.string == "m"}):unit)?
)

):LateralSVelocityValueGram 

--> 
:LateralSVelocityValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("LateralSVelocityValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("m")) {
	
		varDouble = varDouble * 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","Lateral S' Velocity");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
Rule: LateralSVelocityAlternValueRule
(
(
{Token.string ==~ "(?i)S"}
({Token.string == "'"} | {Token.string ==~ "(?i)Prime"})?
({Token.string =~ "(?i)Vel"} | {Token.string ==~ "(?i)Velocity"})?
({Token.string ==~ "(?i)Lateral"} | {Token.string ==~ "(?i)Lat"})

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue
(
(({Token.string == "cm"} | {Token.string == "m"}):unit)?
)

):LateralSVelocityAlternValueGram 

--> 
:LateralSVelocityAlternValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("LateralSVelocityAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("m")) {
	
		varDouble = varDouble * 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","Lateral S' Velocity");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }

  
Rule: TDILateralSVelocityValueRule
(
{Token.string =~ "(?i)TDI"} {Token.string ==~ "(?i)S"}
{Token.string =~ "(?i)waves"} {Token.string == ":"} 
({Token.string !~ "(?i)lateral"}|{SpaceToken.string!=lateral})*
):context
(
( 
( 
{Token.string ==~ "(?i)Lateral"})
({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue
(
(({Token.string == "cm"} | {Token.string == "m"}):unit)?
)

):TDILateralSVelocityValueGram 

--> 
:TDILateralSVelocityValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TDILateralSVelocityValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("m")) {
	
		varDouble = varDouble * 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","Lateral S' Velocity");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "TDILateralSVelocityValueRule");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
  
