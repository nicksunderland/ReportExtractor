Imports: {
	import static gate.Utils.*;
}


/*
*  simpsonsMeasurements.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: simpsonsMeasurements.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of LV Measurement Variable relations from Lookup Annotations 
*/

Phase: simpsonsMeasurements
Input: Token Lookup  
Options: control=Appelt 



Rule: simpsonsEFAbbrevValueRule
( 
( 
({Token.position == "startpunct"})?
({Token.string ==~ "(?i)Simpsons"} | {Token.string ==~ "(?i)Simpson"})
({Token.string == "'"} {Token.string == "s"})?
({Token.string == "'s"})?
({Token.position == "endpunct"})?
({Token.string ==~ "(?i)EF"})?
({Token.string =~ "(?i)Biplane"} | {Token.string =~ "(?i)BP"})?
({Token.string =~ "(?i)derived"})?
({Token.string ==~ "(?i)EF"})?

({Token.position == "startpunct"})?
({Token.string ==~ "(?i)auto"})?
({Token.string ==~ "(?i)EF"})?
({Token.position == "endpunct"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == ">"})?):greaterSign

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):simpsonsEFAbbrevValueGram 

--> 
:simpsonsEFAbbrevValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	gate.AnnotationSet matchedGreaterSign =(gate.AnnotationSet) bindings.get("greaterSign");
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("simpsonsEFAbbrevValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Simpsons EF");
	
	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedGreaterSign != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }

  
Rule: simpsonsEFReverseValueRule 
(
(
({Token.string ==~ "(?i)EF"})
({Token.position == "startpunct"})?
({Token.string ==~ "(?i)Simpsons"} | {Token.string ==~ "(?i)Simpson"})?
({Token.string == "'"} {Token.string == "s"})?
({Token.string == "'s"})?
({Token.string =~ "(?i)Biplane"} | {Token.string =~ "(?i)BP"})?
({Token.position == "endpunct"})?

({Token.string ==~ "(?i)of"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == ">"})?):greaterSign

):context1

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

(
({Token.string ==~ "(?i)by"} | {Token.string ==~ "(?i)using"} | {Token.string ==~ "(?i)with"})?
({Token.position == "startpunct"})?
({Token.string ==~ "(?i)Simpsons"} | {Token.string ==~ "(?i)Simpson"})?
({Token.string == "'"} {Token.string == "s"})?
({Token.string == "'s"})?
({Token.string =~ "(?i)Biplane"} | {Token.string =~ "(?i)BP"})?
({Token.position == "endpunct"})?
):context2

):simpsonsEFReverseValueGram 

--> 
:simpsonsEFReverseValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedcontext1=(gate.AnnotationSet) bindings.get("context1");
	gate.AnnotationSet matchedcontext2=(gate.AnnotationSet) bindings.get("context2");
	
	gate.AnnotationSet matchedGreaterSign =(gate.AnnotationSet) bindings.get("greaterSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("simpsonsEFReverseValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Simpsons EF");
	
	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedGreaterSign != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	String mContext2 = ""; 
	if ( matchedcontext2 != null) { mContext2 = stringFor(doc, matchedcontext2); }
	
	newFeatures.put("context", stringFor(doc, matchedcontext1) + " " + mContext2);
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
  
Rule: simpsonsEFMonoplaneValueRule
( 
( 
({Token.string =~ "(?i)uniplane"} | {Token.string =~ "(?i)Monoplane"})?
({Token.string ==~ "(?i)Simpsons"} | {Token.string ==~ "(?i)Simpson"})
({Token.string == "'"} {Token.string == "s"})?
({Token.string == "'s"})?
({Token.string ==~ "(?i)EF"})?
({Token.string =~ "(?i)uniplane"} | {Token.string =~ "(?i)Monoplane"})?
({Token.string =~ "(?i)derived"})?
({Token.string ==~ "(?i)EF"})?

({Token.position == "startpunct"})?
({Token.string ==~ "(?i)auto"})?
({Token.string ==~ "(?i)EF"})?
({Token.position == "endpunct"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == ">"})?):greaterSign

):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):simpsonsEFMonoplaneValueGram 

--> 
:simpsonsEFMonoplaneValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedGreaterSign =(gate.AnnotationSet) bindings.get("greaterSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("simpsonsEFMonoplaneValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Simpsons EF");
	
	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedGreaterSign != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }



Rule: AutoEFValueRule 
Priority:10
(
(
({Token.string ==~ "(?i)Auto"} | {Token.string ==~ "(?i)AutoEF"} | {Token.string ==~ "(?i)Automated"})
({Token.string =~ "(?i)Biplane"} | {Token.string =~ "(?i)BP"})?
({Token.string ==~ "(?i)EF"})?
({Token.string =~ "(?i)Biplane"} | {Token.string =~ "(?i)BP"})?

({Token.kind != "number"}|{SpaceToken.string!=number})*

({Token.string ==~ "(?i)Ejection"})?
({Token.string ==~ "(?i)fraction"})?
  
({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == ">"})?):greaterSign

):context1

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):AutoEFValueGram 

--> 
:AutoEFValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedcontext1=(gate.AnnotationSet) bindings.get("context1");
	
	gate.AnnotationSet matchedGreaterSign =(gate.AnnotationSet) bindings.get("greaterSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AutoEFValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Auto EF");
	
	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedGreaterSign != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext1));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  

Rule: visualEFValueRule
Priority:5
( 
( 
({Token.string ==~ "(?i)Visual"} | {Token.string ==~ "(?i)Visually"})?
({Token.string ==~ "(?i)estimate[ds]"})?

({Token.string ==~ "(?i)EF"} | {Token.string ==~ "(?i)LVEF"})
({Token.string ==~ "(?i)estimate[ds]"})?
({Token.string ==~ "(?i)Visual"} | {Token.string ==~ "(?i)Visually"})?
({Token.string ==~ "(?i)at"})?
(
({Token.position == "startpunct"})
({Token.position != "endpunct"}|{SpaceToken.string!=endpunct})*
({Token.position == "endpunct"})
)?

({Token.string ==~ "(?i)in"})?
(({Token.string ==~ "(?i)excess"})?):excess
({Token.string ==~ "(?i)of"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == "-"} | {Token.string == ">"} | {Token.string == "<"})?):varSign

):context


(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"} | {Token.string ==~ "(?i)to"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):visualEFValueGram 

--> 
:visualEFValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedExcess=(gate.AnnotationSet) bindings.get("excess");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedVarSign =(gate.AnnotationSet) bindings.get("varSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("visualEFValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	
	String valueSign = "";
	if (matchedVarSign != null) {
		valueSign = stringFor(doc, matchedVarSign);
	}

	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedExcess != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
		
	} else if (valueSign.equals(">")) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else if (valueSign.equals("<") || valueSign.equals("-")) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 - 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
Rule: visualEFAlternValueRule
Priority:6
( 
( 
({Token.string ==~ "(?i)Visual"} | {Token.string ==~ "(?i)Visually"})

({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == "-"} | {Token.string == ">"} | {Token.string == "<"})?):varSign

):context


(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"} | {Token.string ==~ "(?i)to"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):visualEFAlternValueGram 

--> 
:visualEFAlternValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedVarSign =(gate.AnnotationSet) bindings.get("varSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("visualEFAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	
	String valueSign = "";
	if (matchedVarSign != null) {
		valueSign = stringFor(doc, matchedVarSign);
	}

	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (valueSign.equals(">")) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else if (valueSign.equals("<") || valueSign.equals("-")) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 - 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
  
Rule: VisualEFCheckboxValueRule
(
(
{Token.string ==~ "(?i)Greater"}
{Token.string ==~ "(?i)than"}
{Token.string == "50"}
{Token.string == "%"}
({Token.string == "["})?
):context

({Token.string ==~ "(?i)X"}):varValue
):VisualEFCheckboxValueGram 

--> 
:VisualEFCheckboxValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("VisualEFCheckboxValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	newFeatures.put("varValue", "51");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
Rule: VisualEFCheckbox2ValueRule
(
(
{Token.string == "45"}
{Token.string ==~ "(?i)To"}
{Token.string == "50"}
{Token.string == "%"}
({Token.string == "["})?
):context

({Token.string ==~ "(?i)X"}):varValue
):VisualEFCheckbox2ValueGram 

--> 
:VisualEFCheckbox2ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("VisualEFCheckbox2ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	newFeatures.put("varValue", "47.5");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
  
Rule: VisualEFCheckbox3ValueRule
(
(
{Token.string == "36"}
{Token.string ==~ "(?i)To"}
{Token.string == "45"}
{Token.string == "%"}
({Token.string == "["})?
):context

({Token.string ==~ "(?i)X"}):varValue
):VisualEFCheckbox3ValueGram 

--> 
:VisualEFCheckbox3ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("VisualEFCheckbox3ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	newFeatures.put("varValue", "40.5");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  

Rule: VisualEFCheckbox4ValueRule
(
(
{Token.string ==~ "(?i)Less"}
{Token.string ==~ "(?i)Than"}
{Token.string == "35"}
{Token.string == "%"}
({Token.string == "["})?
):context

({Token.string ==~ "(?i)X"}):varValue
):VisualEFCheckbox4ValueGram 

--> 
:VisualEFCheckbox4ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("VisualEFCheckbox4ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Visual EF");
	newFeatures.put("varValue", "34");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }
  
  
Rule: TeichEFValueRule 
(
(
({Token.string ==~ "(?i)2[D]?"} | {Token.string ==~ "(?i)Two"})
({Token.string =~ "(?i)D"})?
({Token.string =~ "(?i)[D]?Teich"})
  
({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
({Token.string == "~"})?
({Token.string == "~"})?
(({Token.string == ">"})?):greaterSign

):context1

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue1

({Token.string == "-"})?
((
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})?):varValue2

(
(({Token.string == "%"}):unit)?
)

):TeichEFValueGram 

--> 
:TeichEFValueGram
  {
	gate.AnnotationSet matchedVar1=(gate.AnnotationSet) bindings.get("varValue1");
	gate.AnnotationSet matchedVar2=(gate.AnnotationSet) bindings.get("varValue2");
	
	gate.AnnotationSet matchedcontext1=(gate.AnnotationSet) bindings.get("context1");
	
	gate.AnnotationSet matchedGreaterSign =(gate.AnnotationSet) bindings.get("greaterSign");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("TeichEFValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","2D Teich EF");
	
	if (matchedVar2 != null) {
		newFeatures.put("varValue1", stringFor(doc, matchedVar1));
		newFeatures.put("varValue2", stringFor(doc, matchedVar2));

		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		Double value2 = Double.parseDouble(stringFor(doc, matchedVar2)); 
		Double varValue = (value1 + value2)/2;
		
		newFeatures.put("varValue", String.valueOf(varValue));
	
	} else if (matchedGreaterSign != null) {
		Double value1 = Double.parseDouble(stringFor(doc, matchedVar1)); 
		
		Double varValue = value1 + 1; 
		newFeatures.put("varValue", String.valueOf(varValue));
	} else {
		newFeatures.put("varValue", stringFor(doc, matchedVar1));
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext1));
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"echo_variable", newFeatures);
  }