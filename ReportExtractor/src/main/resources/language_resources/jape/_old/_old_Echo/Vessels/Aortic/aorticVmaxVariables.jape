Imports: {
	import static gate.Utils.*;

}


/*
*  aorticVmaxVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: aorticVmaxVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of aortic valve Vmax Variable relations from Lookup Annotations 
*/

Phase: aorticVmaxVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: AorticVmaxValueRule
Priority:10
(
(
({Token.string ==~ "(?i)AO"} | {Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"})

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} ) 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):AorticVmaxValueGram 

--> 
:AorticVmaxValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticVmaxValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","AV Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Vmax");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
 
Rule: AorticVmaxAlternValueRule
Priority:1
(
(
({Token.string ==~ "(?i)AORTIC"} {Token.string ==~ "(?i)VALVE"} )
({Token.string !=~ "(?i)AORTA", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)AVA[I]?", Token.string !=~ "(?i)AR", Token.string !=~ "(?i)LAVV", Token.string !=~ "(?i)RAVV", Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)LV", Token.string !=~ "(?i)RV", Token.string !=~ "(?i)RIGHT", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)VENTRICLE"}|{SpaceToken.string!=LVOT} | {Token.string ==~ "(?i)DESCENDING"} {Token.string ==~ "(?i)AORTA"})*

):context
)

(
(
(
({Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)DOPPLER"} {Token.string ==~ "(?i)VELOCITY[-]?"} ({Token.string == "-"})?)
| ( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} ) 
) 

({Token.string == ":"} | {Token.string ==~ "(?i)IS"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):AorticVmaxAlternValueGram 

--> 
:AorticVmaxAlternValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticVmaxAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","AV Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV Vmax altern");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }


Rule: DescAorticVmaxValueRule
Priority:20
(
(

{Token.string ==~ "(?i)DESC"}
{Token.string ==~ "(?i)AO"}

( {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"} ) 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

):DescAorticVmaxValueGram 

--> 
:DescAorticVmaxValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("DescAorticVmaxValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("cm")) {
	
		varDouble = varDouble / 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "m");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","Desc Ao Vmax");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }