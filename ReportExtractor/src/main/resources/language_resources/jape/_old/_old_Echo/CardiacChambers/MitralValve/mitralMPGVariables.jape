Imports: {
	import static gate.Utils.*;

}


/*
*  mitralMPGVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: mitralMPGVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of mitral MPG and part of the Max PG Variable relations from Lookup Annotations 
*/

Phase: mitralMPGVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: MitralMPGValueRule
(
(
({Token.string ==~ "(?i)MV"} | {Token.string ==~ "(?i)LAVV"})
({Token.string ==~ "(?i)MEANPG"} | {Token.string ==~ "(?i)MPD"} | {Token.string ==~ "(?i)MEAN"} {Token.string ==~ "(?i)PG"} )

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)MMHG"}):unit)?
)

):MitralMPGValueGram 

--> 
:MitralMPGValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("MitralMPGValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","MV MPG");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("unit", "mmHg");
	newFeatures.put("rule","MV MPG normal");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  


Rule: MitralMPGAlternValueRule
(
(
({Token.string ==~ "(?i)MITRAL"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"}
{Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)MV"} | {Token.string ==~ "(?i)LAVV"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"})
({Token.string !~ "(?i)ATRIUM", Token.string !=~ "(?i)AORTIC"}|{SpaceToken.string!=AORTIC})*
):context
)

(
(
({Token.string ==~ "(?i)MEANPG"} | {Token.string ==~ "(?i)MEAN"} | {Token.string ==~ "(?i)MPD"} | {Token.string ==~ "(?i)MEAN"} {Token.string ==~ "(?i)P[GD]?"} )

({Token.kind == "word"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)MMHG"}):unit)
)

):MitralMPGAlternValueGram 

--> 
:MitralMPGAlternValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("MitralMPGAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","MV MPG");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("unit", "mmHg");
	newFeatures.put("rule","MV MPG altern");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: MitralMPGAltern2ValueRule
(
(
({Token.string ==~ "(?i)MITRAL"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"}
{Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)MV"} | {Token.string ==~ "(?i)LAVV"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"})
({Token.string !=~ "(?i)ATRIUM", Token.string !=~ "(?i)AORTIC"}|{SpaceToken.string!=PPD})*

{Token.string ==~ "(?i)PPD"}

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})

(
({Token.string ==~ "(?i)MMHG"})
)

{Token.string == ","} 

):context
)

(

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)MMHG"}):unit)
)

):MitralMPGAltern2ValueGram 

--> 
:MitralMPGAltern2ValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("MitralMPGAltern2ValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","MV MPG");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","MV MPG Altern2");
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  } 


Rule: MitralMaxPGAlternValueRule
Priority:10
(
(
({Token.string ==~ "(?i)MITRAL"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"}
{Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)MV"} | {Token.string ==~ "(?i)LAVV"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"})
({Token.string !=~ "(?i)ATRIUM", Token.string !=~ "(?i)AORTIC"} | {SpaceToken.string!=ATRIUM})*

({Token.string !=~ "(?i)AVERAGE[D]?", Token.string !=~ "(?i)MEAN", Token.string !=~ "(?i)AVG[.]?", Token.string !=~ "(?i)MR"})
):context
)

(
(

{Token.string ==~ "(?i)V"}
{Token.string ==~ "(?i)MAX"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == " "})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"})

(
({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"})
{Token.string == "/"}
{Token.string ==~ "(?i)S"}
)?

{Token.string == ","}

):context

{Token.string ==~ "(?i)MPD"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == " "})?

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)MMHG"}):unit)
)

):MitralMaxPGAlternValueGram 

--> 
:MitralMaxPGAlternValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("MitralMaxPGAlternValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","MV max PG");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule","MV Max PG altern");
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }