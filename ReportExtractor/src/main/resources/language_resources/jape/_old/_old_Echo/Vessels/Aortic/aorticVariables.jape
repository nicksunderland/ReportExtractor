Imports: {
	import static gate.Utils.*;

}


/*
*  aorticVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: aorticVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of aortic Measurement Variable relations from Lookup Annotations 
*/

Phase: aorticVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: AorticRootValueRule
(
(
{Token.string ==~ "(?i)Aortic"}
{Token.string ==~ "(?i)root"}

({Token.string == "["})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

):AorticRootValueGram 

--> 
:AorticRootValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticRootValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Aortic Root Diameter");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("unit", "cm");
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AorticRootMModeValueRule
(
(
{Token.string ==~ "(?i)AORTA"}
{Token.string == ":"}
({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)M-"})?
({Token.string ==~ "-"})?
{Token.string ==~ "(?i)MODE"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string == "cm"} | {Token.string == "mm"}):unit)?
)

):AorticRootMModeValueGram 

--> 
:AorticRootMModeValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticRootMModeValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Aortic Root Diameter");
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	String contextStr = stringFor(doc, matchedcontext);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("mm")) {
	
		varDouble = varDouble / 10D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: AorticRootMModeValueAlternRule
(
(
({Token.string ==~ "(?i)AORTA"} {Token.string == ":"})
({Token.string !=~ "(?i)RIGHT", !Lookup.majorType == aortic_TricuspidValve_Exclusion, Token.string !=~ "(?i)MEASUREMENTS", Token.string !=~ "(?i)MITRAL", Token.string !=~ "(?i)LVOT", Token.string !=~ "(?i)PULMONARY", Token.string !=~ "(?i)TRICUSPID", Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)ATRIUM"}|{SpaceToken.string!=LVOT})*

({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)M-"})?
({Token.string ==~ "-"})?
{Token.string ==~ "(?i)MODE"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string == "cm"} | {Token.string == "mm"}):unit)?
)

):AorticRootMModeValueAlternGram 

--> 
:AorticRootMModeValueAlternGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticRootMModeValueAlternGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Aortic Root Diameter");
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	String contextStr = stringFor(doc, matchedcontext);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("mm")) {
	
		varDouble = varDouble / 10D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }

  
Rule: SinusesOfValsalvaValueRule
(
(
({Token.string ==~ "(?i)SINUS"} | {Token.string ==~ "(?i)SINUSES"}) 
({Token.string ==~ "(?i)OF"})?
({Token.string ==~ "(?i)VALSALVA"})?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"})?
):context

(
({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string == "cm"} | {Token.string == "mm"}):unit)
)

):SinusesOfValsalvaValueGram 
(
{Token.string != "/"} 
({Token.string !=~ "(?i)M"} | {Token.string !=~ "(?i)M2"})
{Token.string !=~ "(?i)2"} 
)

--> 
:SinusesOfValsalvaValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("SinusesOfValsalvaValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","Sinuses of Valsalva");
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	String contextStr = stringFor(doc, matchedcontext);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("mm")) {
	
		varDouble = varDouble / 10D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
  
Rule: AVAValueRule
(
(
{Token.string ==~ "(?i)AVA"}
({Token.position == "startpunct"})? ({Token.string ==~ "(?i)VMAX"})? ({Token.string ==~ "(?i)AND"} | {Token.string == "&"})? ({Token.string ==~ "(?i)VTI"})? ({Token.position == "endpunct"})?

({Token.string ==~ "(?i)USING"})? ({Token.string ==~ "(?i)CONTINUITY"})? ({Token.string ==~ "(?i)EQUATION"})? 

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(( ({Token.string ==~ "(?i)CM"}({Token.string == "2"})?) | ({Token.string ==~ "(?i)CM"}{Token.string == "."}{Token.string ==~ "(?i)SQ"})):unit)
)

):AVAValueGram 

--> 
:AVAValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AVAValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","AVA");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
  
Rule: AVAByCEValueRule
(
(
{Token.string ==~ "(?i)AVA"}
{Token.string ==~ "(?i)BY"} 
({Token.string ==~ "(?i)CE"} | ({Token.string ==~ "(?i)CONTINUITY"} {Token.string ==~ "(?i)EQUATION"}))
(
({Token.position == "startpunct"})
({Token.position != "endpunct"}|{SpaceToken.string!=endpunct})*
({Token.position == "endpunct"})
)?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(( ({Token.string ==~ "(?i)CM"}({Token.string == "2"})?) | ({Token.string ==~ "(?i)CM"}{Token.string == "."}{Token.string ==~ "(?i)SQ"})):unit)
)

):AVAByCEValueGram 

--> 
:AVAByCEValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AVAByCEValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","AVA");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	if (matchedunit != null) {
		newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: AVPreEjectionTimeValueRule
(
(
({Token.string ==~ "(?i)AO"} | {Token.string !=~ "(?i)LEFT", Token.string !=~ "(?i)RIGHT"} {Token.string ==~ "(?i)AV"})

{Token.string ==~ "(?i)PREEJ"}
{Token.string ==~ "(?i)TIME"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)MS"} | {Token.string ==~ "(?i)S"} | {Token.string ==~ "(?i)SEC"}):unit)
)

):AVPreEjectionTimeValueGram 

--> 
:AVPreEjectionTimeValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AVPreEjectionTimeValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("s") || unitOrig.equals("sec")) {
	
		varDouble = varDouble * 1000D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "ms");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","AV PreEj Time");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	newFeatures.put("rule", "AV PreEj Time");
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: AorticEROValueRule
(
(
{Token.string ==~ "(?i)AR"}
({Token.string ==~ "(?i)ERO"})

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(( ({Token.string ==~ "(?i)CM"}({Token.string == "2"})?) | ({Token.string ==~ "(?i)CM"}{Token.string == "."}{Token.string ==~ "(?i)SQ"})):unit)
)

):AorticEROValueGram 

--> 
:AorticEROValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticEROValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","AR ERO");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  
Rule: AorticRVValueRule
(
(
{Token.string ==~ "(?i)AR"}
{Token.string ==~ "(?i)RV"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)ML"}):unit)?
)


):AorticRVValueGram 

--> 
:AorticRVValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticRVValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","AR RV");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }
  

Rule: AorticARVTIValueRule
(
(
{Token.string ==~ "(?i)AR"} 
{Token.string ==~ "(?i)VTI"}

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
)

{Token.string !=~ "(?i)IN", Token.string !=~ "(?i)OF"} 

):AorticARVTIValueGram 

--> 
:AorticARVTIValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("AorticARVTIValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	
	String unitOrig = "";
	
	if (matchedunit != null) {
		unitOrig = stringFor(doc, matchedunit);
		newFeatures.put("unit", unitOrig);
	}
	
	String varStr = stringFor(doc, matchedVar);
	
	double varDouble = Double.parseDouble(varStr);
	
	if (unitOrig.equals("m")) {
	
		varDouble = varDouble * 100D;
		
		newFeatures.put("varOrig", varStr);
		newFeatures.put("varValue", String.valueOf(varDouble));
		
		newFeatures.put("unit", "cm");
		
	} else {
		newFeatures.put("varValue", varStr);
	}
	
	newFeatures.put("varType","AR VTI");
	newFeatures.put("rule","LVOT AR VTI Normal");
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }