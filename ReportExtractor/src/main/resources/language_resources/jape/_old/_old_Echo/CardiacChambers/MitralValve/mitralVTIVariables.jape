Imports: {
	import static gate.Utils.*;

}


/*
*  mitralVTIVariables.jape
*
* Copyright (c) 2020- , University of Bristol, Bristol.
*  Tim Dong, 31 January 2020 
*  $Id: mitralVTIVariables.jape,v 1.0 2020/01/31 19:24:00 GMT
*
* The Phase separates Annotations of mitral valve VTI Variable relations from Lookup Annotations 
*/

Phase: mitralVTIVariables
Input: Token Lookup  
Options: control=Appelt 



Rule: MitralVTIValueRule
Priority:1
(
(
({Token.string ==~ "(?i)MITRAL"} {Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)ATRIOVENTRICULAR"}
{Token.string ==~ "(?i)VALVE"} | {Token.string ==~ "(?i)MV"} | {Token.string ==~ "(?i)LAVV"} | {Token.string ==~ "(?i)LEFT"} {Token.string ==~ "(?i)AV"} {Token.string ==~ "(?i)VALVE"})
({Token.string !=~ "(?i)ATRIUM", Token.string !=~ "(?i)AORTIC", Token.string !~ "(?i)MR"} | {SpaceToken.string!=VTI})*

):context
)

(
(
{Token.string ==~ "(?i)VTI"}

(
{Token.position == "startpunct"}
({Token.string ==~ "(?i)CW"} | {Token.string ==~ "(?i)PW"} | {Token.kind == "word"} {Token.string ==~ "(?i)WAVE"} ({Token.string ==~ "(?i)DOPPLER"})? )

{Token.position == "endpunct"}
)?

({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string ==~ "(?i)IS"} | {Token.string ==~ "(?i)OF"} | {Token.string == " "})?
):context

(({Token.kind == "number"})?
({Token.string == "."})?
{Token.kind == "number"}):varValue

(
(({Token.string ==~ "(?i)CM"}):unit)
)

):MitralVTIValueGram 
(
{Token.string != "/"}
{Token.string !=~ "(?i)S"}
)

--> 
:MitralVTIValueGram
  {
	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
	
	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
	
	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
	
    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("MitralVTIValueGram");	
	gate.FeatureMap newFeatures= Factory.newFeatureMap();
	newFeatures.put("varType","MV VTI");
	newFeatures.put("varValue", stringFor(doc, matchedVar));
	newFeatures.put("context", stringFor(doc, matchedcontext));
	
	if (matchedunit != null) {
	newFeatures.put("unit", stringFor(doc, matchedunit));
	}
	
	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"VesselsMeasurements", newFeatures);
  }



  
  
